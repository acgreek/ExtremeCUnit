-include Makefile-project
-include Makefile-determine-os

COVERAGE_CFLAGS= -fprofile-arcs -ftest-coverage
ifeq ($(UNAME), Cygwin)
CFLAGS=$(CFLAGS_DIST) -Wall -ggdb
else 
CFLAGS=$(CFLAGS_DIST) -Wall -ggdb -fPIC 
endif
DEPDIR = .dep
OBJDIR = obj$(DIR_SUFFIX)
COVERAGE_OBJDIR = obj$(DIR_SUFFIX)
DISTDIR = dist$(DIR_SUFFIX)
INSTALL_PREFIX = /usr
CC=gcc
MAKEDEPEND = gcc -M $(CFLAGS) -o $*.d $<
OBJ_FILE_NAMES=$(SRC:.c=.o)
OBJS=$(patsubst %,$(OBJDIR)/%,$(OBJ_FILE_NAMES))
COVERAGE_OBJS=$(patsubst %,$(COVERAGE_OBJDIR)/%,$(OBJ_FILE_NAMES))

SHARED_LIBRARY=lib$(LIBRARY_NAME).so
STATIC_LIBRARY=lib$(LIBRARY_NAME).a
SHARE_LIBRARY_TARGET = $(DISTDIR)/$(SHARED_LIBRARY)
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION)
SHARE_LIBRARY_TARGET_VERSION = $(SHARE_LIBRARY_TARGET).$(VERSION)
STATIC_LIBRARY_TARGET = $(DISTDIR)/$(STATIC_LIBRARY)

INC_FILE_NAMES=$(SRC:.c=.P)
INCLUDES=$(patsubst %,$(DEPDIR)/%,$(INC_FILE_NAMES))


all: run
-include $(INCLUDES)

$(COVERAGE_OBJDIR)/%.o : %.c
	mkdir -p $(OBJDIR); \
	mkdir -p $(DEPDIR); \
	$(MAKEDEPEND); \
	sed -e 's/\(^[^:\.o \t]\)/$(OBJDIR)\/\1/' < $*.d > $(DEPDIR)/$*.P; \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' -e  's/\(^[^:.o \t]*\.o: .*\)/$(OBJDIR)\/\1/' < $*.d >> $(DEPDIR)/$*.P; \
	$(COMPILE.c) $(COVERAGE_CFLAGS) $(CFLAGS) -o $@ $< ;\
	rm -f $*.d;  

$(OBJDIR)/%.o : %.c
	mkdir -p $(OBJDIR); \
	mkdir -p $(DEPDIR); \
	$(MAKEDEPEND); \
	sed -e 's/\(^[^:\.o \t]\)/$(OBJDIR)\/\1/' < $*.d > $(DEPDIR)/$*.P; \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' -e  's/\(^[^:.o \t]*\.o: .*\)/$(OBJDIR)\/\1/' < $*.d >> $(DEPDIR)/$*.P; \
	$(COMPILE.c) $(CFLAGS) -o $@ $< ;\
	rm -f $*.d;  

$(SHARE_LIBRARY_TARGET_VERSION):$(OBJS)
	mkdir -p $(DISTDIR); \
	$(CC) $(CFLAGS) -Wl,-soname,$(SHARED_LIBRARY).$(MAJOR_VERSION) -o $@ -shared $(OBJS) 
ifneq ($(UNAME), Cygwin)
	ldconfig -l $@
endif

$(STATIC_LIBRARY_TARGET):$(OBJS)
	ar rcs $@ $(OBJS)


$(PKGCONFIG_FILE) : $(PKGCONFIG_FILE).in Makefile-common
ifeq ($(UNAME), Cygwin)
	echo "define(LIBRARY_FLAGS,\`-Wl,--export-all-symbols -Wl,--rpath,.,--rpath,dist,--rpath,/usr/lib/ -lExtremeCUnit -ldl')" > pc.m4
	echo "define(C_FLAGS,\`-DUNIT_TEST -pie ')" >> pc.m4
else 
	echo "define(LIBRARY_FLAGS,\`-pie -Wl,--rpath,.,--rpath,dist -lExtremeCUnit -ldl')" > pc.m4
	echo "define(C_FLAGS,\`-DUNIT_TEST -fPIC -pie -rdynamic')" >> pc.m4
endif
	m4 $(PKGCONFIG_FILE).in > $(PKGCONFIG_FILE)

install: $(SHARE_LIBRARY_TARGET_VERSION) $(STATIC_LIBRARY_TARGET) $(PKGCONFIG_FILE)
	mkdir -p $(INSTALL_PREFIX)/$(LIBDIR)
	mkdir -p $(INSTALL_PREFIX)/include	
	mkdir -p $(INSTALL_PREFIX)/$(LIBDIR)/pkgconfig
	cp $(STATIC_LIBRARY_TARGET) $(INSTALL_PREFIX)/$(LIBDIR)
	cp $(HEADER_FILE) $(INSTALL_PREFIX)/include
	cp $(PKGCONFIG_FILE) $(INSTALL_PREFIX)/lib/pkgconfig
ifneq ($(UNAME), Cygwin)
	cp $(SHARE_LIBRARY_TARGET_VERSION) $(INSTALL_PREFIX)/$(LIBDIR)
	ldconfig -l $(INSTALL_PREFIX)/lib/$(SHARED_LIBRARY).$(VERSION)
endif


ifeq ($(UNAME), Cygwin)
$(DISTDIR)/test: $(UNIT_TEST_SRC) $(SHARE_LIBRARY_TARGET_VERSION)
	$(CC) -Wl,--export-all-symbols -shared -ldl -pie $(CFLAGS) -Wl,--rpath,.,--rpath,dist -DUNIT_TEST -o $@ unittest_tests.c unittest_cpp_tests.cc $(SHARE_LIBRARY_TARGET_VERSION) -ldl  -lstdc++
$(DISTDIR)/test_coverage: $(UNIT_TEST_SRC) $(COVERAGE_OBJS)
	$(CC) $(COVERAGE_CFLAGS) -Wl,--export-all-symbols -shared -ldl -pie $(CFLAGS) -Wl,--rpath,.,--rpath,dist -DUNIT_TEST -o $@  unittest_tests.c  unittest_cpp_tests.cc $(COVERAGE_OBJS) -ldl  -lstdc++
else 
$(DISTDIR)/test: $(UNIT_TEST_SRC) $(SHARE_LIBRARY_TARGET_VERSION)
	 $(CC) -ldl -pie -rdynamic $(CFLAGS) -Wl,--rpath,.,--rpath,dist -DUNIT_TEST -o $@  unittest_tests.c unittest_cpp_tests.cc $(SHARE_LIBRARY_TARGET_VERSION) -ldl  -lstdc++
$(DISTDIR)/test_coverage: $(UNIT_TEST_SRC) $(COVERAGE_OBJS)
	 $(CC)  $(COVERAGE_CFLAGS) -ldl -pie -rdynamic $(CFLAGS) -Wl,--rpath,.,--rpath,dist -DUNIT_TEST -o $@  unittest_tests.c  unittest_cpp_tests.cc $(COVERAGE_OBJS) -ldl  -lstdc++

endif 

.PHONY: clean clean_profiling run runv coverage install

clean_profiling:
	find . -name '*.gcda' | xargs -r rm 
#	find . -name '*.gcno' | xargs -r rm

run: $(DISTDIR)/test clean_profiling
	./$(DISTDIR)/test

runv: $(DISTDIR)/test clean_profiling
	./$(DISTDIR)/test -v

coverage:$(DISTDIR)/test_coverage clean_profiling
	lcov --directory obj --zerocounters
	./$(DISTDIR)/test
	lcov --directory obj --capture --output-file obj/app.info
	genhtml obj/app.info -o html

clean:  clean_profiling
	rm $(DISTDIR) $(OBJS) $(COVERAGE_OBJDIR) $(SHARE_LIBRARY_TARGET_VERSION) -rf
	rm -f $(PKGCONFIG_FILE)
