Why another unit test framework? Honestly, I haven't tried all free unit test frameworks out there but I have used a few over the years. Everyone I used was had some trivial issue I felt need more work. I could have just contributed to one of the existing opensourced projects but give that my ideal frame work is fairly minimalist I decided to write my own.

Features:
-integration with vim's gcc error handling. If you setup 'make' to run your tests from with in vim (for example via ':make test' or something like that) the unit test error messages are in the proper format that vim knows how to such when vim return from running 'make' the curser is set to the line where the first error occurred and you can use ':cn' to move the curser to next error.
-Suites and fixtures supported.
-tests do no need to be manually called from in some main function, the test function only needs to written properly and it will automatically execute 
-tests run in forked subprocess
-memory leaks are detected, though currently only the entire test to reported is reported as leaking, the actual line where the memory was allocated is not intentified.
-when '-G' command line arg is used, any test that fails will be re-started in a gdb at the start of the test fuction.
-minimalist output. By default, if all tests pass, no output is displayed. There is an argument to get a test report.
-By default, performance tests are not run because often they are slow. All unit test should not take a lot of execution time.


to install, execute:
- make runv
- # the library should build and all tests should pass 
- sudo make install # this will install the library and header files off the /usr prefix

to build your unit test binary, add the follow to your CFLAGS and/or CXXFLAGS: `pkg-config ExtremeCUnit --cflags`
and add to your LDFLAGS: `pkg-config ExtremeCUnit --libs`



you can write your unit tests in a separate file or include them in same files as the rest of your source code. You can encapsolate code you don't want include in the release binary via 
#ifdef UNIT_TEST 
TEST() {
...
}
...
#endif

if your binary already has a main function, you will need to encapsolate it in 
#ifndef UNIT_TEST
int main(.. ){
}
#endif


To use the -g or -G command line args, your effective user must be root or /proc/sys/kernel/yama/ptrace_scope
needs to be to 0. You can use the following command to set.

echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

this setting will go away after the system restarts. To make prem. edit /etc/sysctl.d/10-ptrace.conf and change the line:

kernel.yama.ptrace_scope = 1

To read

kernel.yama.ptrace_scope = 0

